{
	"title": "How to keep your npm dependencies updated with a simple command",
	"content": "<p>Working with AWS serverless we need to use the same version of the Node runtime AWS Lambda supports, to achieve this we need to use two things in conjunction.</p><p>The first command is \"npm update\", this will update all of our project libraries to the latest version respecting the semantic versioning.</p><p>This is really useful because in theory, we won't have any breaking changes that come with a major update</p><p>The second command is to execute a library called <a href=\"https://www.npmjs.com/package/npm-check\" target=\"_blank\">npm-check</a> (install it with \"npm i -D npm-check\"), this library will update our dependencies to the next major version, probably breaking some stuff, so it's really important to see the changes and go to each project repository to check in its changelog what changed that warranted a new major version instead of a minor or patch update.</p><p>Make sure to use the flag --skip-unused so you don't get any error relating to testing libraries.</p><p>When working with AWS and Typescript another important flag to add is \"--ignore @types/node\" so it doesn't update to the next major version before AWS supports it.</p><p>So the final script to add on our scripts object of the package.json file will look like this: \"update\": \"npm update && npm-check --skip-unused --ignore @types/node --update-all\"</p><p>Doing this we can easily update our dependencies from time to time using the simple command \"npm run update\"</p><p>If you are using a framework like Angular and need to update to a new major version I recommend using the official instructions from <a href=\"https://update.angular.io\" target=\"_blank\">update.angular.io</a>, after having the new major version installed you can keep using this custom script.</p>"
}